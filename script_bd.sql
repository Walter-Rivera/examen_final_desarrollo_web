CREATE TABLE ESTADO_USUARIO
(
    ID_ESTADO_USR NUMBER(3),
    NOMBRE VARCHAR2(100)
);
ALTER TABLE ESTADO_USUARIO ADD CONSTRAINT PK_EU PRIMARY KEY(ID_ESTADO_USR);



CREATE TABLE TIPO_MOVIMIENTO_USUARIO
(
    ID_TIPO_MOVIMIENTO NUMBER(3),
    DESCRIPCION VARCHAR2(100)
);
ALTER TABLE TIPO_MOVIMIENTO_USUARIO ADD CONSTRAINT PK_TMU PRIMARY KEY(ID_TIPO_MOVIMIENTO);



CREATE TABLE CAMPO_AFECTADO_USUARIO
(
    ID_CAMPO NUMBER(3),
    DESCRIPCION VARCHAR2(100)
);
ALTER TABLE CAMPO_AFECTADO_USUARIO ADD CONSTRAINT PK_CAU PRIMARY KEY(ID_CAMPO);




CREATE TABLE ROL_USUARIO
(
    ID_ROL_USUARIO NUMBER(3),
    DESCRIPCION VARCHAR2(100)
);
ALTER TABLE ROL_USUARIO ADD CONSTRAINT PK_IRU PRIMARY KEY(ID_ROL_USUARIO);



CREATE TABLE USUARIO_SISTEMA
(
    ID_USUARIO NUMBER(10),
    NOMBRES VARCHAR2(200),
    APELLIDOS VARCHAR2(100),
    ID_ESTADO_USR NUMBER(3),
    ID_ROL NUMBER(3),
    ACCESO VARCHAR2(200),
    ULTIMO_LOGIN TIMESTAMP,
    ID_ULTIMO_USUARIO_MODIFICADOR NUMBER(6)
);
ALTER TABLE USUARIO_SISTEMA ADD CONSTRAINT PK_US PRIMARY KEY(ID_USUARIO);
ALTER TABLE USUARIO_SISTEMA ADD CONSTRAINT FK_IEU FOREIGN KEY(ID_ESTADO_USR)
REFERENCES ESTADO_USUARIO(ID_ESTADO_USR);
ALTER TABLE USUARIO_SISTEMA ADD CONSTRAINT FK_IDR FOREIGN KEY(ID_ROL)
REFERENCES ROL_USUARIO(ID_ROL_USUARIO);
/*LUEGO DE CREAR EL USUARIO DE PRUEBAS, SE PUEDE HABILITAR LA LLAVE FORÀNEA*/
ALTER TABLE USUARIO_SISTEMA ADD CONSTRAINT FK_URMOD FOREIGN KEY(ID_ULTIMO_USUARIO_MODIFICADOR)
REFERENCES USUARIO_SISTEMA(ID_USUARIO);











CREATE TABLE ESTADO_CLIENTE
(
    ID_ESTADO_CLIENTE NUMBER(3),
    DESCRIPCION VARCHAR2(100)
);
ALTER TABLE ESTADO_CLIENTE ADD CONSTRAINT PK_EC PRIMARY KEY (ID_ESTADO_CLIENTE);



CREATE TABLE TIPO_MOVIMIENTO_CLIENTE
(
    ID_TIPO_MOVIMIENTO NUMBER(3),
    DESCRIPCION VARCHAR2(100)
);
ALTER TABLE TIPO_MOVIMIENTO_CLIENTE ADD CONSTRAINT PK_TMC PRIMARY KEY(ID_TIPO_MOVIMIENTO);


CREATE TABLE CAMPO_AFECTADO_CLIENTE
(
    ID_CAMPO_AFECTADO NUMBER(3),
    DESCRIPCION VARCHAR2(100)
);
ALTER TABLE CAMPO_AFECTADO_CLIENTE ADD CONSTRAINT PK_CAC PRIMARY KEY(ID_CAMPO_AFECTADO);



CREATE TABLE CLIENTE
(
    ID_CLIENTE NUMBER(10),
    NOMBRES VARCHAR2(200),
    APELLIDOS VARCHAR2(200),
    CORREO_INSTITUCIONAL VARCHAR2(100),
    ID_ESTADO_CLIENTE NUMBER(3),
    ID_ULT_USR_MODIFICADOR NUMBER(10)
);
ALTER TABLE CLIENTE ADD CONSTRAINT PK_CFID PRIMARY KEY(ID_CLIENTE);
ALTER TABLE CLIENTE ADD CONSTRAINT FK_IDESTCL FOREIGN KEY(ID_ESTADO_CLIENTE) REFERENCES ESTADO_CLIENTE(ID_ESTADO_CLIENTE);
ALTER TABLE CLIENTE ADD CONSTRAINT FK_NUUMCF FOREIGN  KEY(ID_ULT_USR_MODIFICADOR) REFERENCES USUARIO_SISTEMA(ID_USUARIO);




CREATE TABLE SOFTWARE
(
    ID_SOFTWARE NUMBER(10),
    NOMBRE VARCHAR2(500),
    ID_ULTIMO_USUARIO_MODIFICADOR NUMBER(10)
);
ALTER TABLE SOFTWARE ADD CONSTRAINT PK_ID_SOFT PRIMARY KEY(ID_SOFTWARE);





CREATE TABLE ESTADO_VERSION
(
    ID_ESTADO_VERSION NUMBER(3),
    DESCRIPCION VARCHAR2(200)
);
ALTER TABLE ESTADO_VERSION ADD CONSTRAINT PK_ESTVERSION PRIMARY KEY(ID_ESTADO_VERSION);


CREATE TABLE VERSION_SOFTWARE
(
    ID_VERSION NUMBER(10),
    DESCRIPCION VARCHAR2(200),
    ID_SOFTWARE NUMBER(10),
    ID_ESTADO_VERSION NUMBER(3),
    FECHA_INICIO TIMESTAMP,
    FECHA_FINALIZACION TIMESTAMP,
    ULTIMO_USUARIO_MODIFICADOR NUMBER(10)
);
ALTER TABLE VERSION_SOFTWARE ADD CONSTRAINT PK_VSOFT PRIMARY KEY(ID_VERSION);
ALTER TABLE VERSION_SOFTWARE ADD CONSTRAINT FK_EVERSION FOREIGN KEY(ID_ESTADO_VERSION)
REFERENCES USUARIO_SISTEMA(ID_USUARIO);




CREATE TABLE ESTADO_DETALLE_SERVICIO
(
    ID_ESTADO_DETALLE_SERVICIO NUMBER(03),
    DESCRIPCION VARCHAR2(100)
);
ALTER TABLE ESTADO_DETALLE_SERVICIO ADD CONSTRAINT PK_IDEDSER PRIMARY KEY(ID_ESTADO_DETALLE_SERVICIO);




CREATE TABLE TIPO_MOVIMIENTO_BT_VSOFTWARE
(
    ID_TIPO_MOVIMIENTO NUMBER(3),
    DESCRIPCION VARCHAR2(100)
);
ALTER TABLE TIPO_MOVIMIENTO_BT_VSOFTWARE ADD CONSTRAINT PK_TMBS PRIMARY KEY(ID_TIPO_MOVIMIENTO);



CREATE TABLE CAMPO_AFECTADO_BT_VSOFTWARE
(
    ID_CAMPO NUMBER(3),
    DESCRIPCION VARCHAR2(100)
);
ALTER TABLE CAMPO_AFECTADO_BT_VSOFTWARE ADD CONSTRAINT PK_CABSOF PRIMARY KEY(ID_CAMPO);





CREATE TABLE DETALLE_SERVICIO
(
    ID_VERSION NUMBER(10),
    ID_CLIENTE NUMBER(10),
    ID_ESTADO_DETALLE_SERVICIO NUMBER(03),
    FECHA_INICIO_SERVICIO DATE,
    FECHA_INSTALACION DATE,
    FECHA_CESE_SERVICIO DATE,
    COSTO_TOTAL_SERVICIO NUMBER(6,2),
    ID_ULTIMO_USUARIO_MODIFICADOR NUMBER(10)
);
ALTER TABLE DETALLE_SERVICIO ADD CONSTRAINT PK_DSER PRIMARY KEY(ID_VERSION,ID_CLIENTE);
ALTER TABLE DETALLE_SERVICIO ADD CONSTRAINT FK_IDVERSION FOREIGN KEY(ID_VERSION) REFERENCES VERSION_SOFTWARE(ID_VERSION);
ALTER TABLE DETALLE_SERVICIO ADD CONSTRAINT FK_IDCLIENTE FOREIGN KEY(ID_CLIENTE) REFERENCES CLIENTE(ID_CLIENTE);
ALTER TABLE DETALLE_SERVICIO ADD CONSTRAINT FK_IUUMOD FOREIGN KEY(ID_ULTIMO_USUARIO_MODIFICADOR) REFERENCES USUARIO_SISTEMA(ID_USUARIO);




/*bitácora para la tabla clientes*/
CREATE TABLE BITACORA_CLIENTE
(
    ID_OPERACION NUMBER(10),
    ID_CLIENTE_AFECTADO NUMBER(10),
    ID_TIPO_MOVIMIENTO NUMBER(3),
    VALOR_ANTIGUO VARCHAR2(200),
    VALOR_NUEVO VARCHAR2(200),
    ID_CAMPO_AFECTADO NUMBER(3),
    ID_USUARIO_RESP NUMBER(10),
    FECHA_MOVIMIENTO TIMESTAMP 
);
ALTER TABLE BITACORA_CLIENTE ADD CONSTRAINT PK_BICLI PRIMARY KEY(ID_OPERACION);
ALTER TABLE BITACORA_CLIENTE ADD CONSTRAINT FK_NCLI FOREIGN KEY(ID_CLIENTE_AFECTADO)
REFERENCES CLIENTE(ID_CLIENTE);
ALTER TABLE BITACORA_CLIENTE ADD CONSTRAINT FK_IDTIPMOV FOREIGN KEY(ID_TIPO_MOVIMIENTO)
REFERENCES TIPO_MOVIMIENTO_CLIENTE(ID_TIPO_MOVIMIENTO);
ALTER TABLE BITACORA_CLIENTE ADD CONSTRAINT FK_IDCAMAFEC
FOREIGN KEY(ID_CAMPO_AFECTADO) REFERENCES CAMPO_AFECTADO_CLIENTE(ID_CAMPO_AFECTADO);


CREATE TABLE BITACORA_USUARIO
(
    ID_TRANSACCION NUMBER(10),
    ID_USR_AFECTADO NUMBER(6),
    ID_TIPO_MOVIMIENTO NUMBER(3),
    ID_CAMPO_AFECTADO NUMBER(3),
    FECHA_MOVIMIENTO TIMESTAMP,
    ID_USUARIO_RESP NUMBER(10),
    VALOR_ANTERIOR VARCHAR(100),
    VALOR_NUEVO VARCHAR(100)
);
ALTER TABLE BITACORA_USUARIO ADD CONSTRAINT PK_BIUSR PRIMARY KEY (ID_TRANSACCION);
ALTER TABLE BITACORA_USUARIO ADD CONSTRAINT FK_IDUSRAFEC FOREIGN KEY(ID_USR_AFECTADO)
REFERENCES USUARIO_SISTEMA(ID_USUARIO);
ALTER TABLE BITACORA_USUARIO ADD CONSTRAINT FK_IDCAAFEC FOREIGN KEY (ID_CAMPO_AFECTADO)
REFERENCES CAMPO_AFECTADO_USUARIO(ID_CAMPO);
ALTER TABLE BITACORA_USUARIO ADD CONSTRAINT FK_ITPMU FOREIGN KEY (ID_TIPO_MOVIMIENTO)
REFERENCES TIPO_MOVIMIENTO_USUARIO(ID_TIPO_MOVIMIENTO);




CREATE TABLE BITACORA_DETALLE_SERVICIO
(
    ID_TRANSACCION NUMBER(10),
    ID_VERSION NUMBER(10),
    ID_CLIENTE NUMBER(10),
    ID_TIPO_MOVIMIENTO NUMBER(3),
    ID_CAMPO_AFECTADO NUMBER(3),
    FECHA_MOVIMIENTO TIMESTAMP,
    ID_USUARIO_RESP NUMBER(6),
    VALOR_ANTERIOR VARCHAR(100),
    VALOR_NUEVO VARCHAR(100)
);
ALTER TABLE BITACORA_DETALLE_SERVICIO ADD CONSTRAINT PK_ID_TRANSACCION PRIMARY KEY(ID_TRANSACCION);
ALTER TABLE BITACORA_DETALLE_SERVICIO ADD CONSTRAINT FK_DETALLE_SERVICIO FOREIGN KEY(ID_VERSION,ID_CLIENTE)
REFERENCES DETALLE_SERVICIO(ID_VERSION,ID_CLIENTE);
ALTER TABLE BITACORA_DETALLE_SERVICIO ADD CONSTRAINT FK_TMOBDS FOREIGN KEY(ID_TIPO_MOVIMIENTO)
REFERENCES TIPO_MOVIMIENTO_BT_VSOFTWARE(ID_TIPO_MOVIMIENTO);
ALTER TABLE BITACORA_DETALLE_SERVICIO ADD CONSTRAINT FK_ICAFECTADO FOREIGN KEY(ID_CAMPO_AFECTADO)
REFERENCES CAMPO_AFECTADO_BT_VSOFTWARE(ID_CAMPO);









/***************************************************************************************/
/*SEQUENCIAS Y TRIGGERS PARA INSERCIÒN DE FILAS CON CAMPOS AUTOINCREMENTABLES*/
/***************************************************************************************/



/*triggers para hacer automático en índice de las tablas que lo requieran*/

/*tabla estado usuario*/
DROP SEQUENCE SEQ_ESTADO_USUARIO;
CREATE SEQUENCE SEQ_ESTADO_USUARIO
START WITH 1
INCREMENT BY 1
NOMAXVALUE;

CREATE OR REPLACE TRIGGER BI_ESTADO_USUARIO
BEFORE INSERT ON ESTADO_USUARIO
FOR EACH ROW
BEGIN
    SELECT SEQ_ESTADO_USUARIO.NEXTVAL INTO :NEW.ID_ESTADO_USR FROM DUAL;
END;




DROP SEQUENCE SEQ_TIPO_MOVIMIENTO_USUARIO;
CREATE SEQUENCE SEQ_TIPO_MOVIMIENTO_USUARIO
START WITH 1
INCREMENT BY 1
NOMAXVALUE;

CREATE OR REPLACE TRIGGER BI_TIPO_MOVIMIENTO_USUARIO
BEFORE INSERT ON TIPO_MOVIMIENTO_USUARIO
FOR EACH ROW
BEGIN
    SELECT SEQ_TIPO_MOVIMIENTO_USUARIO.NEXTVAL INTO :NEW.ID_TIPO_MOVIMIENTO FROM DUAL;
END;





DROP SEQUENCE SEQ_CAMPO_AFECTADO_USUARIO;
CREATE SEQUENCE SEQ_CAMPO_AFECTADO_USUARIO
START WITH 1
INCREMENT BY 1
NOMAXVALUE;

CREATE OR REPLACE TRIGGER BI_CAMPO_AFECTADO_USUARIO
BEFORE INSERT ON CAMPO_AFECTADO_USUARIO
FOR EACH ROW
BEGIN
    SELECT SEQ_CAMPO_AFECTADO_USUARIO.NEXTVAL INTO :NEW.ID_CAMPO FROM DUAL;
END;





DROP SEQUENCE SEQ_ROL_USUARIO;
CREATE SEQUENCE SEQ_ROL_USUARIO
START WITH 1
INCREMENT BY 1
NOMAXVALUE;
DROP TRIGGER BI_ROL_USUARIO;
CREATE OR REPLACE TRIGGER BI_ROL_USUARIO
BEFORE INSERT ON ROL_USUARIO
FOR EACH ROW
BEGIN
    SELECT SEQ_ROL_USUARIO.NEXTVAL INTO :NEW.ID_ROL_USUARIO FROM DUAL;
END;



DROP SEQUENCE SEQ_USUARIO_SISTEMA;
CREATE SEQUENCE SEQ_USUARIO_SISTEMA
START WITH 1
INCREMENT BY 1
NOMAXVALUE;

CREATE OR REPLACE TRIGGER BI_USUARIO_SISTEMA
BEFORE INSERT ON USUARIO_SISTEMA
FOR EACH ROW
BEGIN
    SELECT SEQ_USUARIO_SISTEMA.NEXTVAL INTO :NEW.ID_USUARIO FROM DUAL;
END;



DROP SEQUENCE SEQ_ESTADO_CLIENTE;
CREATE SEQUENCE SEQ_ESTADO_CLIENTE
START WITH 1
INCREMENT BY 1
NOMAXVALUE;

CREATE OR REPLACE TRIGGER BI_ESTADO_CLIENTE
BEFORE INSERT ON ESTADO_CLIENTE
FOR EACH ROW
BEGIN
    SELECT SEQ_ESTADO_CLIENTE.NEXTVAL INTO :NEW.ID_ESTADO_CLIENTE FROM DUAL;
END;



DROP SEQUENCE SEQ_TIPO_MOVIMIENTO_CLIENTE;
CREATE SEQUENCE SEQ_TIPO_MOVIMIENTO_CLIENTE
START WITH 1
INCREMENT BY 1
NOMAXVALUE;

CREATE OR REPLACE TRIGGER BI_TIPO_MOVIMIENTO_CLIENTE
BEFORE INSERT ON TIPO_MOVIMIENTO_CLIENTE
FOR EACH ROW
BEGIN
    SELECT SEQ_TIPO_MOVIMIENTO_CLIENTE.NEXTVAL INTO :NEW.ID_TIPO_MOVIMIENTO FROM DUAL;
END;




DROP SEQUENCE SEQ_CAMPO_AFECTADO_CLIENTE;
CREATE SEQUENCE SEQ_CAMPO_AFECTADO_CLIENTE
START WITH 1
INCREMENT BY 1
NOMAXVALUE;

CREATE OR REPLACE TRIGGER BI_CAMPO_AFECTADO_CLIENTE
BEFORE INSERT ON CAMPO_AFECTADO_CLIENTE
FOR EACH ROW
BEGIN
    SELECT SEQ_CAMPO_AFECTADO_CLIENTE.NEXTVAL INTO :NEW.ID_CAMPO_AFECTADO FROM DUAL;
END;






DROP SEQUENCE SEQ_CLIENTE;
CREATE SEQUENCE SEQ_CLIENTE
START WITH 1
INCREMENT BY 1
NOMAXVALUE;

CREATE OR REPLACE TRIGGER BI_CLIENTE
BEFORE INSERT ON CLIENTE
FOR EACH ROW
BEGIN
    SELECT SEQ_CLIENTE.NEXTVAL INTO :NEW.ID_CLIENTE FROM DUAL;
END;




DROP SEQUENCE SEQ_SOFTWARE;
CREATE SEQUENCE SEQ_SOFTWARE
START WITH 1
INCREMENT BY 1
NOMAXVALUE;

CREATE OR REPLACE TRIGGER BI_SOFTWARE
BEFORE INSERT ON SOFTWARE
FOR EACH ROW
BEGIN
    SELECT SEQ_SOFTWARE.NEXTVAL INTO :NEW.ID_SOFTWARE FROM DUAL;
END;




DROP SEQUENCE SEQ_ESTADO_VERSION;
CREATE SEQUENCE SEQ_ESTADO_VERSION
START WITH 1
INCREMENT BY 1
NOMAXVALUE;

CREATE OR REPLACE TRIGGER BI_ESTADO_SOFTWARE
BEFORE INSERT ON ESTADO_VERSION
FOR EACH ROW
BEGIN
    SELECT SEQ_ESTADO_VERSION.NEXTVAL INTO :NEW.ID_ESTADO_VERSION FROM DUAL;
END;


DROP SEQUENCE SEQ_VERSION_SOFTWARE;
CREATE SEQUENCE SEQ_VERSION_SOFTWARE
START WITH 1
INCREMENT BY 1
NOMAXVALUE;

CREATE OR REPLACE TRIGGER BI_VERSION_SOFTWARE
BEFORE INSERT ON VERSION_SOFTWARE
FOR EACH ROW
BEGIN
    SELECT SEQ_VERSION_SOFTWARE.NEXTVAL INTO :NEW.ID_VERSION FROM DUAL;
END;


DROP SEQUENCE SEQ_ESTADO_DETALLE_SERVICIO;
CREATE SEQUENCE SEQ_ESTADO_DETALLE_SERVICIO
START WITH 1
INCREMENT BY 1
NOMAXVALUE;

CREATE OR REPLACE TRIGGER BI_ESTADO_DETALLE_SERVICIO
BEFORE INSERT ON ESTADO_DETALLE_SERVICIO
FOR EACH ROW
BEGIN
    SELECT SEQ_ESTADO_DETALLE_SERVICIO.NEXTVAL INTO :NEW.ID_ESTADO_DETALLE_SERVICIO FROM DUAL;
END;




DROP SEQUENCE SEQ_TIPO_MOVIMIENTOBTVSOFTWARE;
CREATE SEQUENCE SEQ_TIPO_MOVIMIENTOBTVSOFTWARE
START WITH 1
INCREMENT BY 1
NOMAXVALUE;

CREATE OR REPLACE TRIGGER BI_TP_MOV_BT_VSOFTWARE
BEFORE INSERT ON TIPO_MOVIMIENTO_BT_VSOFTWARE
FOR EACH ROW
BEGIN
    SELECT SEQ_TIPO_MOVIMIENTOBTVSOFTWARE.NEXTVAL INTO :NEW.ID_TIPO_MOVIMIENTO FROM DUAL;
END;




DROP SEQUENCE SEQ_CAMPO_AFEC_BT_VSOFTWARE;
CREATE SEQUENCE SEQ_CAMPO_AFEC_BT_VSOFTWARE
START WITH 1
INCREMENT BY 1
NOMAXVALUE;

CREATE OR REPLACE TRIGGER BI_CAMPOAFECTADO_BT_VSOFTWARE
BEFORE INSERT ON CAMPO_AFECTADO_BT_VSOFTWARE
FOR EACH ROW
BEGIN
    SELECT SEQ_CAMPO_AFEC_BT_VSOFTWARE.NEXTVAL INTO :NEW.ID_CAMPO FROM DUAL;
END;






DROP SEQUENCE SEQ_BITACORA_CLIENTE;
CREATE SEQUENCE SEQ_BITACORA_CLIENTE
START WITH 1
INCREMENT BY 1
NOMAXVALUE;

CREATE OR REPLACE TRIGGER BI_BITACORA_CLIENTE
BEFORE INSERT ON BITACORA_CLIENTE
FOR EACH ROW
BEGIN
    SELECT SEQ_BITACORA_CLIENTE.NEXTVAL INTO :NEW.ID_OPERACION FROM DUAL;
END;






DROP SEQUENCE SEQ_BITACORA_USUARIO;
CREATE SEQUENCE SEQ_BITACORA_USUARIO
START WITH 1
INCREMENT BY 1
NOMAXVALUE;

CREATE OR REPLACE TRIGGER BI_BITACORA_USUARIO
BEFORE INSERT ON BITACORA_USUARIO
FOR EACH ROW
BEGIN
    SELECT SEQ_BITACORA_USUARIO.NEXTVAL INTO :NEW.ID_TRANSACCION FROM DUAL;
END;





DROP SEQUENCE SEQ_BITACORA_DETALLE_SERVICIO;
CREATE SEQUENCE SEQ_BITACORA_DETALLE_SERVICIO
START WITH 1
INCREMENT BY 1
NOMAXVALUE;

CREATE OR REPLACE TRIGGER BI_BITACORA_DETALLE_SERVICIO
BEFORE INSERT ON BITACORA_DETALLE_SERVICIO
FOR EACH ROW
BEGIN
    SELECT SEQ_BITACORA_DETALLE_SERVICIO.NEXTVAL INTO :NEW.ID_TRANSACCION FROM DUAL;
END;



/******************************************************************/
/****************INSERCIÓN DE DATOS**********************/
/******************************************************************/
/*tabla estado_usuario: Un usuario puede estar activo, inactivo o de baja
(no visible para el usuario final cuando luego de ejecutar la opción de eliminar)*/
 
 INSERT INTO ESTADO_USUARIO(NOMBRE) VALUES('ACTIVO');
 INSERT INTO ESTADO_USUARIO(NOMBRE) VALUES('INACTIVO');
 INSERT INTO ESTADO_USUARIO(NOMBRE) VALUES('BAJA');


/*TIPO_MOVIMIENTO_USUARIO: Registrá en la bitácora si la transaccion que realizó el 
usuario fue una inserción, actualización o baja(borrado= no a la vista del usuario, pero
si aún existente en la base de datos) de datos */
INSERT INTO TIPO_MOVIMIENTO_USUARIO(DESCRIPCION) VALUES('INSERCION');
INSERT INTO TIPO_MOVIMIENTO_USUARIO(DESCRIPCION) VALUES('ACTUALIZACIÓN');
INSERT INTO TIPO_MOVIMIENTO_USUARIO(DESCRIPCION) VALUES('BAJA');


/*CAMPO_AFECTADO_USUARIO: Determina que campo de una tupla correspondiente al usuario,
fue modificado*/
INSERT INTO CAMPO_AFECTADO_USUARIO(DESCRIPCION) VALUES('ID_USUARIO')/*NO EDITABLE*/;
INSERT INTO CAMPO_AFECTADO_USUARIO(DESCRIPCION) VALUES('NOMBRES');
INSERT INTO CAMPO_AFECTADO_USUARIO(DESCRIPCION) VALUES('APELLIDOS');
INSERT INTO CAMPO_AFECTADO_USUARIO(DESCRIPCION) VALUES('ID_ESTADO_USUARIO');
INSERT INTO CAMPO_AFECTADO_USUARIO(DESCRIPCION) VALUES('ROL');
INSERT INTO CAMPO_AFECTADO_USUARIO(DESCRIPCION) VALUES('ACCESO');/*CONTRASEÑA*/
INSERT INTO CAMPO_AFECTADO_USUARIO(DESCRIPCION) VALUES('ULTIMO_LOGIN');
INSERT INTO CAMPO_AFECTADO_USUARIO(DESCRIPCION) VALUES('ULTIMO_USUARIO_MODIFICADOR');


/*rol usuario: Administrador y usuario_ordinario.*/

INSERT INTO ROL_USUARIO(DESCRIPCION) VALUES('ADMINISTRADOR');
INSERT INTO ROL_USUARIO(DESCRIPCION) VALUES('USUARIO_ORDINARIO');


/*USUARIO SISTEMA: Usuario para pruebas*/
INSERT INTO USUARIO_SISTEMA (NOMBRES,APELLIDOS,ID_ESTADO_USR,ID_ROL,ACCESO,ULTIMO_LOGIN)
VALUES('WALTER','RIVERA',1,1,'2020',SYSDATE);



/*tabla ESTADO_CLIENTE: Un CLIENTE puede estar activo, inactivo o de baja
(no visible para el usuario final cuando luego de ejecutar la opción de eliminar)*/
 
 INSERT INTO ESTADO_CLIENTE(DESCRIPCION) VALUES('ACTIVO');
 INSERT INTO ESTADO_CLIENTE(DESCRIPCION) VALUES('INACTIVO');
 INSERT INTO ESTADO_CLIENTE(DESCRIPCION) VALUES('BAJA');


/*TIPO_MOVIMIENTO_CLIENTE: Registrá en la bitácora si la transaccion que realizó el 
usuario fue una inserción, actualización o baja(borrado= no a la vista del usuario, pero
si aún existente en la base de datos) de datos */
INSERT INTO TIPO_MOVIMIENTO_CLIENTE(DESCRIPCION) VALUES('INSERCION');
INSERT INTO TIPO_MOVIMIENTO_CLIENTE(DESCRIPCION) VALUES('ACTUALIZACIÓN');
INSERT INTO TIPO_MOVIMIENTO_CLIENTE(DESCRIPCION) VALUES('BAJA');



/*CAMPO_AFECTADO_CLIENTE: Determina que campo de una tupla correspondiente al usuario,
fue modificado*/

INSERT INTO CAMPO_AFECTADO_CLIENTE(DESCRIPCION) VALUES('ID_CLIENTE')/*NO EDITABLE*/;
INSERT INTO CAMPO_AFECTADO_CLIENTE(DESCRIPCION) VALUES('NOMBRES');
INSERT INTO CAMPO_AFECTADO_CLIENTE(DESCRIPCION) VALUES('APELLIDOS');
INSERT INTO CAMPO_AFECTADO_CLIENTE(DESCRIPCION) VALUES('CORREO_INSTITUCIONAL');
INSERT INTO CAMPO_AFECTADO_CLIENTE(DESCRIPCION) VALUES('ID_ESTADO_CLIENTE');
INSERT INTO CAMPO_AFECTADO_CLIENTE(DESCRIPCION) VALUES('ID_ULT_USR_MODIFICADOR');




/*tabla ESTADO_VERSION: Una version de software puede estar activa, inactiva o de baja
(no visible para el usuario final cuando luego de ejecutar la opción de eliminar)*/
 
 INSERT INTO ESTADO_VERSION(DESCRIPCION) VALUES('ACTIVA');
 INSERT INTO ESTADO_VERSION(DESCRIPCION) VALUES('INACTIVA');
 INSERT INTO ESTADO_VERSION(DESCRIPCION) VALUES('BAJA');



/*TABLA ESTADO_DETALLE_SERVICIO: UN DETALLE_SERVICIO de software puede estar ACTIVO, INACTIVO o de baja
(no visible para el usuario final cuando luego de ejecutar la opción de eliminar)*/

 INSERT INTO ESTADO_DETALLE_SERVICIO(DESCRIPCION) VALUES('ACTIVO');
 INSERT INTO ESTADO_DETALLE_SERVICIO(DESCRIPCION) VALUES('INACTIVO');
 INSERT INTO ESTADO_DETALLE_SERVICIO(DESCRIPCION) VALUES('BAJA');



/*TIPO_MOVIMIENTO_BT_VSOFTWARE: Registrá en la bitácora si la transaccion que realizó el 
usuario fue una inserción, actualización o baja(borrado= no a la vista del usuario, pero
si aún existente en la base de datos) de datos */
INSERT INTO TIPO_MOVIMIENTO_BT_VSOFTWARE(DESCRIPCION) VALUES('INSERCION');
INSERT INTO TIPO_MOVIMIENTO_BT_VSOFTWARE(DESCRIPCION) VALUES('ACTUALIZACIÓN');
INSERT INTO TIPO_MOVIMIENTO_BT_VSOFTWARE(DESCRIPCION) VALUES('BAJA');



/*CAMPO_AFECTADO_BT_VSOFTWARE: Determina que campo de una tupla correspondiente al DETALLE_SERVICIO fue alterado
para registarlo por medio de un id en la bitácora*/
INSERT INTO CAMPO_AFECTADO_BT_VSOFTWARE(DESCRIPCION) VALUES('ID_VERSION')/*NO EDITABLE AL SER UNA LLAVE COMPUESTA*/;
INSERT INTO CAMPO_AFECTADO_BT_VSOFTWARE(DESCRIPCION) VALUES('ID_SERVICIO')/*NO EDITABLE AL SER UNA LLAVE COMPUESTA*/;
INSERT INTO CAMPO_AFECTADO_BT_VSOFTWARE(DESCRIPCION) VALUES('ID_ESTADO_DETALLE_SERVICIO');
INSERT INTO CAMPO_AFECTADO_BT_VSOFTWARE(DESCRIPCION) VALUES('FECHA_INICIO_SERVICIO');
INSERT INTO CAMPO_AFECTADO_BT_VSOFTWARE(DESCRIPCION) VALUES('FECHA_INSTALACION');
INSERT INTO CAMPO_AFECTADO_BT_VSOFTWARE(DESCRIPCION) VALUES('FECHA_CESE_SERVICIO');
INSERT INTO CAMPO_AFECTADO_BT_VSOFTWARE(DESCRIPCION) VALUES('COSTO_TOTAL_SERVICIO');
INSERT INTO CAMPO_AFECTADO_BT_VSOFTWARE(DESCRIPCION) VALUES('ID_ULTIMO_USUARIO_MODIFICADOR');










